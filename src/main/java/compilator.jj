/**
* Definição das opções utilizads para a geração do código fonte
*/
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}


/**
* Definição da classe do compilador tendo um método main que receberá o input 
* e realizará o processo de compilação a partir da produção E
*/
PARSER_BEGIN(Parser)

public class Parser {
    public static void main(String args[]) throws ParseException {
        Parser parser = new Parser(System.in);
        System.out.print("Enter expression: ");
        parser.E();
    }
}
PARSER_END(Parser)

/**
* Definição dos elementos que serão ignorados pelo compilador.
*/
SKIP :
{
    "\r" | "\t" | "\n"
}

/**
* Definição dos tokens que serão utilizados nas produções, sendo a maioria palavras-chaves 
* com exceção da regex que é utilizada para definir um número inteiro.
*/
TOKEN :
{
    <every: "every">|
    <minute: "minute">|
    <hour: "hour">|
    <day: "day">|
    <month: "month">|
    <at: "at">|
    <on: "on">|
    <separator: ":">|
    <num: ["1"-"9"](["0"-"9"])*>|
    <space: " ">
}

/**
* Definição das produções utilizando dos tokens para montagem da gramática
*/
void E():
{
    String t;
    String p;
}
{
    <every>(<space>)?t=T()
        {
            System.out.println("Translation: " + t);
        }

}
String T():
{
    String h;
    String m;
    String p;
}
{
    <day><space><at><space>h=N()<separator>m=N()
        {
            return String.format("%s %s * * *", m, h);
        }
    |
    p=P()
        {
            return p;
        }
}
String P():
{
    String d;
    String h;
    String m;
    String g;
}
{
    <month><space><on><space><day><space>d=N()<space><at><space>h=N()<separator>m=N()
        {
            return String.format("%s %s %s * *", m, h, d);
        }
}
String N():
{
    Token t;
}
{
    t=<num>
        {
            return t.image;
        }
}